from dotenv import load_dotenv
import os

from sqlalchemy import Column, String, Integer, ForeignKey, create_engine
from sqlalchemy.orm import registry, relationship, Session

load_dotenv()

PASSWORD = os.getenv('PASSWORD')
HOST=os.getenv('DATABASE_URL')
USER=os.getenv('DATABASE_USER')
SCHEMA=os.getenv('SCHEMA')
PORT=os.getenv('PORT')

db_engine = f"mysql+mysqlconnector://{USER}:{PASSWORD}@{HOST}:{PORT}/{SCHEMA}"
engine = create_engine(db_engine, echo=True)

mapper_registry = registry()

Base = mapper_registry.generate_base()

"""
Base represents the declarative base class generated by the mapper_registry object. 
The declarative base class is used as a foundation for defining ORM models (i.e., Python classes that map to database tables).

Declarative Base Class:

Base is an instance of the declarative base class generated by the mapper_registry.generate_base() method.
This base class is used as a foundation for all ORM models, enabling SQLAlchemy to automatically handle table creation, column definition, and mapping between Python classes and database tables.
Defining ORM Models:

By inheriting from Base, you can define your ORM models as Python classes. Each class represents a table in the database, and each attribute of the class corresponds to a column in the table.
    
"""

class Project(Base):
    __tablename__ = 'projects'
    project_id = Column(Integer, primary_key=True)
    title = Column(String(length=50))
    description = Column(String(length=50))
    
    def __repr__(self):
        return "<Project(title='{0}, description='{1}')>".format(self.title, self.description)
    
    
class Task(Base):
    __tablename__ = 'tasks'
    task_id = Column(Integer, primary_key=True)
    project_id = Column(Integer, ForeignKey('projects.project_id'))
    description = Column(String(length=50))
    
    project = relationship("Project")
    
    def __repr__(self):
        return "<description='{0}')>".format(self.description)

Base.metadata.create_all(engine)

"""
Creating Session Object for ORM operated database operations

The session object is responsible for building insert() constructs and sending them to the database in a transaction
A transaction is a set of all or nothing queries. We either want them all to run or none of them to run at all.

In ORM, the session object makes use of a pattern known as unit of work. This generally means it accumulates 
changes one at a time, but it does not communicate them to the database until needed.

When it does emit SQL to the database to push out the current set of chnages, the process is known as a flush.

"""

with Session(engine) as session:
    organize_closet_project = Project(title='Organize closet', description='Organize closet by color and style')
    
    session.add(organize_closet_project)
    session.flush()
    
    tasks = [ 
            Task(project_id=organize_closet_project.project_id,
                description='Decide what clothes to donate'),
            Task(project_id=organize_closet_project.project_id,
                description='Organize summer clothes'),
            Task(project_id=organize_closet_project.project_id,
                description='Organize winter clothes')
            ]
    
    session.bulk_save_objects(tasks)
    session.commit()