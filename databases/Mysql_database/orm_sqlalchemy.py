from dotenv import load_dotenv
import os

from sqlalchemy import Column, String, Integer, ForeignKey, create_engine
from sqlalchemy.orm import registry, relationship

load_dotenv()

PASSWORD = os.getenv('PASSWORD')
HOST=os.getenv('DATABASE_URL')
USER=os.getenv('DATABASE_USER')
SCHEMA=os.getenv('SCHEMA')
PORT=os.getenv('PORT')

db_engine = f"mysql+mysqlconnector://{USER}:{PASSWORD}@{HOST}:{PORT}/{SCHEMA}"
engine = create_engine(db_engine, echo=True)

mapper_registry = registry()

Base = mapper_registry.generate_base()

"""
Base represents the declarative base class generated by the mapper_registry object. 
The declarative base class is used as a foundation for defining ORM models (i.e., Python classes that map to database tables).

Declarative Base Class:

Base is an instance of the declarative base class generated by the mapper_registry.generate_base() method.
This base class is used as a foundation for all ORM models, enabling SQLAlchemy to automatically handle table creation, column definition, and mapping between Python classes and database tables.
Defining ORM Models:

By inheriting from Base, you can define your ORM models as Python classes. Each class represents a table in the database, and each attribute of the class corresponds to a column in the table.
    
"""

class Project(Base):
    __tablename__ = 'projects'
    project_id = Column(Integer, primary_key=True)
    title = Column(String(length=50))
    description = Column(String(length=50))
    
    def __repr__(self):
        return "<Project(title='{0}, description='{1}')>".format(self.title, self.description)
    
    
class Task(Base):
    __tablename__ = 'tasks'
    task_id = Column(Integer, primary_key=True)
    project_id = Column(Integer, ForeignKey('projects.project_id'))
    description = Column(String(length=50))
    
    project = relationship("Project")
    
    def __repr__(self):
        return "<description='{0}')>".format(self.description)

Base.metadata.create_all(engine)